{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","className","this","props","task","onClick","remove","Component","NewTodoForm","state","handleChange","bind","handleSubmit","e","setState","target","value","preventDefault","newTodo","id","uuid","create","onSubmit","type","name","placeholder","onChange","TodoList","todos","filter","todo","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAgBeA,G,YAbf,iLAEI,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aAAaC,KAAKC,MAAMC,MACvC,4BAAQH,UAAU,SAASI,QAASH,KAAKC,MAAMG,QAA/C,UALR,GAA0BC,c,6PCCnB,IAsCQC,EAtCf,YACE,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXL,KAAM,IAER,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANH,EADrB,0EAUeE,GACXX,KAAKY,SAAS,CAAEV,KAAMS,EAAEE,OAAOC,UAXnC,mCAceH,GACXA,EAAEI,iBACF,IAAMC,E,qVAAO,IAAQhB,KAAKO,MAAb,CAAoBU,GAAIC,QACrClB,KAAKC,MAAMkB,OAAOH,GAClBhB,KAAKY,SAAS,CAAEV,KAAM,OAlB1B,+BAsBI,OACE,0BAAMkB,SAAUpB,KAAKU,aAAcX,UAAU,eAC3C,2BACEsB,KAAK,OACLC,KAAK,OACLL,GAAG,OACHH,MAAOd,KAAKO,MAAML,KAClBqB,YAAY,kBACZC,SAAUxB,KAAKQ,eAEjB,4CAhCR,GAAiCH,aC0ClBoB,EAzCf,YACE,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXmB,MAAO,IAET,EAAKP,OAAS,EAAKA,OAAOV,KAAZ,gBACd,EAAKL,OAAS,EAAKA,OAAOK,KAAZ,gBANG,EADrB,oEAUSO,GACLhB,KAAKY,SAAS,CACZc,MAAM,GAAD,mBAAM1B,KAAKO,MAAMmB,OAAjB,CAAwBV,QAZnC,6BAgBSC,GACLjB,KAAKY,SAAS,CACZc,MAAO1B,KAAKO,MAAMmB,MAAMC,OAAO,SAAAC,GAAI,OAAIA,EAAKX,IAAMA,QAlBxD,+BAsBY,IAAD,OACHS,EAAQ1B,KAAKO,MAAMmB,MAAMG,IAAI,SAAAD,GAC/B,OACE,kBAAC,EAAD,CACE1B,KAAM0B,EAAK1B,KACX4B,IAAKF,EAAKX,GACVb,OAAQ,kBAAM,EAAKA,OAAOwB,EAAKX,SAIrC,OACE,yBAAKlB,UAAU,YACb,kBAAC,EAAD,CAAaoB,OAAQnB,KAAKmB,SACzBO,OAnCT,GAA8BrB,aCUf0B,MAVf,WACE,OACE,yBAAKhC,UAAU,OACb,+CAEA,kBAAC,EAAD,QCEciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.db777ed7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nexport class Todo extends Component {\n  render() {\n    return (\n      <div className=\"Todo\">\n        <div className=\"Todo-task\">{this.props.task}</div>\n        <button className=\"remove\" onClick={this.props.remove}>\n          X\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport \"./NewTodoForm.css\";\nimport uuid from \"uuid\";\n\nexport class NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      task: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ task: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const newTodo = { ...this.state, id: uuid() };\n    this.props.create(newTodo);\n    this.setState({ task: \"\" });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"NewTodoForm\">\n        <input\n          type=\"text\"\n          name=\"todo\"\n          id=\"todo\"\n          value={this.state.task}\n          placeholder=\"Add new todo...\"\n          onChange={this.handleChange}\n        />\n        <button>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./TodoList.css\";\nimport Todo from \"./Todo\";\nimport NewTodoForm from \"./NewTodoForm\";\n\nexport class TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n  }\n\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id != id)\n    });\n  }\n\n  render() {\n    let todos = this.state.todos.map(todo => {\n      return (\n        <Todo\n          task={todo.task}\n          key={todo.id}\n          remove={() => this.remove(todo.id)}\n        />\n      );\n    });\n    return (\n      <div className=\"TodoList\">\n        <NewTodoForm create={this.create} />\n        {todos}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Todo App - Form</h1>\n\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}